{
  "address": "0xA5F8Ee44E608Ee921145797002b93872b34f572C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "contract TestToken",
          "name": "_testToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_returnPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "property",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PropertyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "unitNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "street",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "city",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "state",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "zip",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "country",
              "type": "string"
            }
          ],
          "internalType": "struct SharedStruct.PropertyAddress",
          "name": "_propertyAddress",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "propertyStatus",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "propertyType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "landSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerSqft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bedrooms",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bathrooms",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yearBuilt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastSoldPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastSoldDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStruct.PropertyData",
          "name": "_propertyData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "phone",
              "type": "string"
            }
          ],
          "internalType": "struct SharedStruct.PropertyOwnerContact",
          "name": "_propertyOwnerContact",
          "type": "tuple"
        },
        {
          "internalType": "string[]",
          "name": "_imagesCid",
          "type": "string[]"
        }
      ],
      "name": "createNewProperty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProperties",
      "outputs": [
        {
          "internalType": "contract Property[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minReturnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "properties",
      "outputs": [
        {
          "internalType": "contract Property",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestAmount",
          "type": "uint256"
        }
      ],
      "name": "requestToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "returnTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeRatio",
          "type": "uint256"
        }
      ],
      "name": "updateExchangeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinReturnAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_returnPenalty",
          "type": "uint256"
        }
      ],
      "name": "updateReturnPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x800fdf29fae6373c839657cff474095cc4958f1cbab54d60729bb41f6f2731fe",
  "receipt": {
    "to": null,
    "from": "0xdFA4C3D580479eAb0dd0122cd6661fdc3215239f",
    "contractAddress": "0xA5F8Ee44E608Ee921145797002b93872b34f572C",
    "transactionIndex": 3,
    "gasUsed": "4536752",
    "logsBloom": "0x00000000000000200000000100000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000008000000000000000000000000000000000800001000000000000200100000000000000100000020000000000000000000800000000000000000080000000000002400000000000000000000000000000000000000000000000000000000000000000200000000000000000080000000000000000000000000000000000000000004000000000000004000001000000000100000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x6d23ef56fecc13f6a5170f52673e86aefd27632d7841af36bc290f0dda417a18",
    "transactionHash": "0x800fdf29fae6373c839657cff474095cc4958f1cbab54d60729bb41f6f2731fe",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 36760785,
        "transactionHash": "0x800fdf29fae6373c839657cff474095cc4958f1cbab54d60729bb41f6f2731fe",
        "address": "0xA5F8Ee44E608Ee921145797002b93872b34f572C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dfa4c3d580479eab0dd0122cd6661fdc3215239f"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x6d23ef56fecc13f6a5170f52673e86aefd27632d7841af36bc290f0dda417a18"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 36760785,
        "transactionHash": "0x800fdf29fae6373c839657cff474095cc4958f1cbab54d60729bb41f6f2731fe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dfa4c3d580479eab0dd0122cd6661fdc3215239f",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000284b61387c300000000000000000000000000000000000000000000000000002d6808c30d71e54000000000000000000000000000000000000000000000ad1aff1e9342164adab00000000000000000000000000000000000000000000000002ae352af85aee54000000000000000000000000000000000000000000000ad1b01a349559e0ddab",
        "logIndex": 14,
        "blockHash": "0x6d23ef56fecc13f6a5170f52673e86aefd27632d7841af36bc290f0dda417a18"
      }
    ],
    "blockNumber": 36760785,
    "cumulativeGasUsed": "5115964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "5000000000000000000",
    "0xa3D4F27D60957A0D1E5066192C3Bf1c64077a8C0",
    1000,
    10,
    1
  ],
  "numDeployments": 8,
  "solcInputHash": "00c0b064d2b3edf9a18264ba459f4e43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"contract TestToken\",\"name\":\"_testToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PropertyCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"unitNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"street\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"state\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"zip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"internalType\":\"struct SharedStruct.PropertyAddress\",\"name\":\"_propertyAddress\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"propertyStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"landSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSqft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bedrooms\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bathrooms\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearBuilt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSoldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSoldDate\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStruct.PropertyData\",\"name\":\"_propertyData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"}],\"internalType\":\"struct SharedStruct.PropertyOwnerContact\",\"name\":\"_propertyOwnerContact\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"_imagesCid\",\"type\":\"string[]\"}],\"name\":\"createNewProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProperties\",\"outputs\":[{\"internalType\":\"contract Property[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"properties\",\"outputs\":[{\"internalType\":\"contract Property\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"}],\"name\":\"requestToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRatio\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinReturnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_returnPenalty\",\"type\":\"uint256\"}],\"name\":\"updateReturnPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PropertyManager.sol\":\"PropertyManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Property.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"./SharedStruct.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Property is SharedStruct, Ownable {\\n    PropertyAddress public propertyAddress;\\n    PropertyData public propertyData;\\n    PropertyOwnerContact public propertyOwnerContact;\\n    string[] public imagesCid;\\n    constructor(\\n        PropertyAddress memory _propertyAddress,\\n        PropertyData memory _propertyData,\\n        PropertyOwnerContact memory _propertyOwnerContact,\\n        string[] memory _imagesCid\\n    ) {\\n        propertyAddress = _propertyAddress;\\n        propertyData = _propertyData;\\n        propertyOwnerContact = _propertyOwnerContact;\\n        imagesCid = _imagesCid;\\n    }\\n\\n    function updatePropertyAddress(\\n        PropertyAddress memory _propertyAddress\\n    ) external onlyOwner {\\n        propertyAddress = _propertyAddress;\\n    }\\n\\n    function updatePropertyData(\\n        PropertyData memory _propertyData\\n    ) external onlyOwner {\\n        propertyData = _propertyData;\\n    }\\n\\n    function updatePropertyOwnerContact(\\n        PropertyOwnerContact memory _propertyOwnerContact\\n    ) external onlyOwner {\\n        propertyOwnerContact = _propertyOwnerContact;\\n    }\\n\\n    function updateImagesCid(\\n        string[] memory _imagesCid\\n    ) external onlyOwner {\\n        imagesCid = _imagesCid;\\n    }\\n\\n    function getImagesCid() external view returns (string[] memory) {\\n        return imagesCid;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x672d4b8fd5bf891de87b724331ce00d3159f2063741445883c0a4f37cf290173\",\"license\":\"GPL-3.0\"},\"contracts/PropertyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"contracts/TestToken.sol\\\";\\nimport \\\"contracts/SharedStruct.sol\\\";\\nimport \\\"contracts/Property.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract PropertyManager is SharedStruct, Ownable {\\n    TestToken immutable i_testToken;\\n    Property[] public properties; //contract address of properties\\n    uint256 public fee;\\n    uint256 public exchangeRatio;\\n    uint256 public returnPenalty;\\n    uint256 public minReturnAmount;\\n    event PropertyCreated(address indexed property, address indexed owner);\\n\\n    constructor(\\n        uint256 _fee,\\n        TestToken _testToken,\\n        uint256 _exchangeRatio,\\n        uint256 _returnPenalty,\\n        uint256 _minReturnAmount\\n    ) {\\n        fee = _fee;\\n        i_testToken = _testToken;\\n        exchangeRatio = _exchangeRatio;\\n        returnPenalty = _returnPenalty;\\n        minReturnAmount = _minReturnAmount;\\n    }\\n\\n    modifier requireFeesPaid() {\\n        require(\\n            i_testToken.transferFrom(msg.sender, address(this), fee),\\n            \\\"Fees not paid\\\"\\n        );\\n        _;\\n    }\\n\\n    function createNewProperty(\\n        PropertyAddress memory _propertyAddress,\\n        PropertyData memory _propertyData,\\n        PropertyOwnerContact memory _propertyOwnerContact,\\n        string[] memory _imagesCid\\n    ) external requireFeesPaid {\\n        Property newProperty = new Property(\\n            _propertyAddress,\\n            _propertyData,\\n            _propertyOwnerContact,\\n            _imagesCid\\n        );\\n        properties.push(newProperty);\\n        // mapping (PropertyAddress => uint) name; // unit number | buildingnumber | ->property Contract A\\n        newProperty.transferOwnership(msg.sender);\\n        emit PropertyCreated(address(newProperty), msg.sender);\\n    }\\n\\n    // address -> query all address in properites -> sorting in our NestJS backend -> send back to frontend\\n\\n    // function deposit(uint256 _amount) external payable {\\n    //     require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n    //     require(msg.value == _amount, \\\"Amount must be equal msg.value\\\");\\n    //     payable(address(this)).transfer(_amount);\\n    //     uint256 exchangeAmount = msg.value * exchangeRatio;\\n    //     i_testToken.mint(msg.sender, exchangeAmount);\\n    // }\\n\\n    // function deposit() external payable {\\n    //     require(msg.value >= 0, \\\"Amount must be equal msg.value\\\");\\n    //     payable(address(this)).transfer(msg.value);\\n    //     uint256 exchangeAmount = msg.value * exchangeRatio;\\n    //     i_testToken.mint(msg.sender, exchangeAmount);\\n    // } // convert MATIC -> TOKEN // front request 10 -> MATIC need deposit ->\\n\\n    //ratio 1 MATIC : 1000 TOKEN\\n    function requestToken(uint256 _requestAmount) external payable {\\n        uint256 requiredMaticAmount = _requestAmount / exchangeRatio; // 1000 / 1000 = 1 MATIC\\n        payable(address(this)).transfer(requiredMaticAmount);\\n        i_testToken.mint(msg.sender, _requestAmount);\\n    }\\n    // matheus function\\n    function purchaseTokens() external payable {\\n        i_testToken.mint(msg.sender, msg.value * exchangeRatio);\\n    }\\n    // native token # ERC20 \\n\\n    // DEPOSIT 1 MATIC -> RECEIVE 1 TOKEN -> RETURN 1 TOKEN -> BURN THAT 1 TOKEN -> RETURN 0.9 MATIC -> WE KEEP 0.1 MATIC\\n    function returnTokens(uint256 amount) external payable {\\n        require(\\n            amount > minReturnAmount,\\n            \\\"Amount must be greater than minReturnAmount\\\"\\n        );\\n        // check token balance of user from mapping\\n        require(\\n            i_testToken.balanceOf(msg.sender) >= amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        uint256 penaltyAmount = (amount * returnPenalty) / 100;\\n        uint256 returnAmount = (amount - penaltyAmount) / exchangeRatio;\\n        i_testToken.burnFrom(msg.sender, amount); // approve it first\\n        payable(msg.sender).transfer(returnAmount);\\n    }\\n\\n    function updateExchangeRatio(uint256 _exchangeRatio) external onlyOwner {\\n        exchangeRatio = _exchangeRatio;\\n    }\\n\\n    function updateReturnPenalty(uint256 _returnPenalty) external onlyOwner {\\n        returnPenalty = _returnPenalty;\\n    }\\n\\n    function updateMinReturnAmount(\\n        uint256 _minReturnAmount\\n    ) external onlyOwner {\\n        minReturnAmount = _minReturnAmount;\\n    }\\n\\n    function updateFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function getProperties() external view returns (Property[] memory) {\\n        return properties;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x4c292320392febd74c9c0c31ce3a63ed503d2fc034ec3729c7194e67673a578b\",\"license\":\"GPL-3.0\"},\"contracts/SharedStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ncontract SharedStruct {\\n    struct PropertyAddress {\\n        string unitNumber;\\n        string street;\\n        string city;\\n        string state;\\n        string zip;\\n        string country;\\n    }\\n    struct PropertyData {\\n        string name;\\n        string description;\\n        string propertyStatus;\\n        string propertyType;\\n        uint256 landSize;\\n        uint256 pricePerSqft;\\n        uint256 bedrooms;\\n        uint256 bathrooms;\\n        uint256 yearBuilt;\\n        uint256 lastSoldPrice;\\n        uint256 lastSoldDate;\\n    }\\n    struct PropertyOwnerContact {\\n        string name;\\n        string email;\\n        string phone;\\n    }\\n}\\n\",\"keccak256\":\"0xeef38d1003b3fc29ceecdc8f9d7cf9d969003964db99bc092e8b5f2cb8746158\",\"license\":\"GPL-3.0\"},\"contracts/TestToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract TestToken is ERC20, ERC20Burnable, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    constructor() ERC20(\\\"TestToken\\\", \\\"TEST\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n    \\n    function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) {  \\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x530515dde2682fb9f2a3f749ff73b837ca8f54e80fe00db4af82fbbb47e4d611\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610620001225760003560e01c80637acde80811620000a3578063dcc780da116200006d578063dcc780da146200031f578063ddca3f43146200034d578063ec0cfd0b146200037d578063f2fde38b14620003ad578063f7b1080814620003db5762000122565b80637acde80814620002635780638da5cb5b14620002915780639012c4a814620002c1578063a6f0bf6214620002ef5762000122565b80633ccfd60b11620000f15780633ccfd60b14620001a35780634006ccc514620001bd57806366e772c414620001ed57806370aba303146200021b578063715018a614620002495762000122565b8063130d101614620001275780632b4df9d314620001575780633290ce2914620001775780633ae1786f1462000183575b600080fd5b3480156200013457600080fd5b506200013f6200041f565b6040516200014e919062000e2e565b60405180910390f35b6200017560048036038101906200016f919062000e90565b62000425565b005b6200018162000516565b005b620001a160048036038101906200019b919062000e90565b620005b8565b005b348015620001b057600080fd5b50620001bb62000804565b005b348015620001ca57600080fd5b50620001d562000858565b604051620001e4919062000e2e565b60405180910390f35b348015620001fa57600080fd5b5062000219600480360381019062000213919062000e90565b6200085e565b005b3480156200022857600080fd5b5062000247600480360381019062000241919062001504565b62000872565b005b3480156200025657600080fd5b506200026162000ad1565b005b3480156200027057600080fd5b506200028f600480360381019062000289919062000e90565b62000ae9565b005b3480156200029e57600080fd5b50620002a962000afd565b604051620002b8919062001637565b60405180910390f35b348015620002ce57600080fd5b50620002ed6004803603810190620002e7919062000e90565b62000b26565b005b348015620002fc57600080fd5b506200030762000b3a565b60405162000316919062000e2e565b60405180910390f35b3480156200032c57600080fd5b506200034b600480360381019062000345919062000e90565b62000b40565b005b3480156200035a57600080fd5b506200036562000b54565b60405162000374919062000e2e565b60405180910390f35b3480156200038a57600080fd5b506200039562000b5a565b604051620003a491906200177c565b60405180910390f35b348015620003ba57600080fd5b50620003d96004803603810190620003d39190620017d1565b62000bea565b005b348015620003e857600080fd5b5062000407600480360381019062000401919062000e90565b62000c74565b60405162000416919062001814565b60405180910390f35b60055481565b6000600354826200043791906200188f565b90503073ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801562000480573d6000803e3d6000fd5b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b8152600401620004de929190620018c7565b600060405180830381600087803b158015620004f957600080fd5b505af11580156200050e573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f193360035434620005639190620018f4565b6040518363ffffffff1660e01b815260040162000582929190620018c7565b600060405180830381600087803b1580156200059d57600080fd5b505af1158015620005b2573d6000803e3d6000fd5b50505050565b6005548111620005ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005f690620019c6565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016200065b919062001637565b602060405180830381865afa15801562000679573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069f9190620019ff565b1015620006e3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006da9062001a81565b60405180910390fd5b6000606460045483620006f79190620018f4565b6200070391906200188f565b90506000600354828462000718919062001aa3565b6200072491906200188f565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc679033856040518363ffffffff1660e01b815260040162000783929190620018c7565b600060405180830381600087803b1580156200079e57600080fd5b505af1158015620007b3573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015620007fe573d6000803e3d6000fd5b50505050565b6200080e62000cb4565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801562000855573d6000803e3d6000fd5b50565b60035481565b6200086862000cb4565b8060058190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff1660e01b8152600401620008d39392919062001ade565b6020604051808303816000875af1158015620008f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000919919062001b58565b6200095b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009529062001bda565b60405180910390fd5b6000848484846040516200096f9062000e05565b6200097e949392919062001f9c565b604051809103906000f0801580156200099b573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000a3c919062001637565b600060405180830381600087803b15801562000a5757600080fd5b505af115801562000a6c573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f4a743f9cfd435653e5ce31aa99ac3d4140af2413791addec975ccefc22de10c460405160405180910390a35050505050565b62000adb62000cb4565b62000ae7600062000d39565b565b62000af362000cb4565b8060048190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000b3062000cb4565b8060028190555050565b60045481565b62000b4a62000cb4565b8060038190555050565b60025481565b6060600180548060200260200160405190810160405280929190818152602001828054801562000be057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000b95575b5050505050905090565b62000bf462000cb4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c5d906200207b565b60405180910390fd5b62000c718162000d39565b50565b6001818154811062000c8557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62000cbe62000dfd565b73ffffffffffffffffffffffffffffffffffffffff1662000cde62000afd565b73ffffffffffffffffffffffffffffffffffffffff161462000d37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d2e90620020ed565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b612de7806200211083390190565b6000819050919050565b62000e288162000e13565b82525050565b600060208201905062000e45600083018462000e1d565b92915050565b6000604051905090565b600080fd5b600080fd5b62000e6a8162000e13565b811462000e7657600080fd5b50565b60008135905062000e8a8162000e5f565b92915050565b60006020828403121562000ea95762000ea862000e55565b5b600062000eb98482850162000e79565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000f128262000ec7565b810181811067ffffffffffffffff8211171562000f345762000f3362000ed8565b5b80604052505050565b600062000f4962000e4b565b905062000f57828262000f07565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000f895762000f8862000ed8565b5b62000f948262000ec7565b9050602081019050919050565b82818337600083830152505050565b600062000fc762000fc18462000f6b565b62000f3d565b90508281526020810184848401111562000fe65762000fe562000f66565b5b62000ff384828562000fa1565b509392505050565b600082601f83011262001013576200101262000f61565b5b81356200102584826020860162000fb0565b91505092915050565b600060c0828403121562001047576200104662000ec2565b5b6200105360c062000f3d565b9050600082013567ffffffffffffffff81111562001076576200107562000f5c565b5b620010848482850162000ffb565b600083015250602082013567ffffffffffffffff811115620010ab57620010aa62000f5c565b5b620010b98482850162000ffb565b602083015250604082013567ffffffffffffffff811115620010e057620010df62000f5c565b5b620010ee8482850162000ffb565b604083015250606082013567ffffffffffffffff81111562001115576200111462000f5c565b5b620011238482850162000ffb565b606083015250608082013567ffffffffffffffff8111156200114a576200114962000f5c565b5b620011588482850162000ffb565b60808301525060a082013567ffffffffffffffff8111156200117f576200117e62000f5c565b5b6200118d8482850162000ffb565b60a08301525092915050565b60006101608284031215620011b357620011b262000ec2565b5b620011c061016062000f3d565b9050600082013567ffffffffffffffff811115620011e357620011e262000f5c565b5b620011f18482850162000ffb565b600083015250602082013567ffffffffffffffff81111562001218576200121762000f5c565b5b620012268482850162000ffb565b602083015250604082013567ffffffffffffffff8111156200124d576200124c62000f5c565b5b6200125b8482850162000ffb565b604083015250606082013567ffffffffffffffff81111562001282576200128162000f5c565b5b620012908482850162000ffb565b6060830152506080620012a68482850162000e79565b60808301525060a0620012bc8482850162000e79565b60a08301525060c0620012d28482850162000e79565b60c08301525060e0620012e88482850162000e79565b60e083015250610100620012ff8482850162000e79565b61010083015250610120620013178482850162000e79565b610120830152506101406200132f8482850162000e79565b6101408301525092915050565b60006060828403121562001355576200135462000ec2565b5b62001361606062000f3d565b9050600082013567ffffffffffffffff81111562001384576200138362000f5c565b5b620013928482850162000ffb565b600083015250602082013567ffffffffffffffff811115620013b957620013b862000f5c565b5b620013c78482850162000ffb565b602083015250604082013567ffffffffffffffff811115620013ee57620013ed62000f5c565b5b620013fc8482850162000ffb565b60408301525092915050565b600067ffffffffffffffff82111562001426576200142562000ed8565b5b602082029050602081019050919050565b600080fd5b6000620014536200144d8462001408565b62000f3d565b9050808382526020820190506020840283018581111562001479576200147862001437565b5b835b81811015620014c757803567ffffffffffffffff811115620014a257620014a162000f61565b5b808601620014b1898262000ffb565b855260208501945050506020810190506200147b565b5050509392505050565b600082601f830112620014e957620014e862000f61565b5b8135620014fb8482602086016200143c565b91505092915050565b6000806000806080858703121562001521576200152062000e55565b5b600085013567ffffffffffffffff81111562001542576200154162000e5a565b5b62001550878288016200102e565b945050602085013567ffffffffffffffff81111562001574576200157362000e5a565b5b620015828782880162001199565b935050604085013567ffffffffffffffff811115620015a657620015a562000e5a565b5b620015b4878288016200133c565b925050606085013567ffffffffffffffff811115620015d857620015d762000e5a565b5b620015e687828801620014d1565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200161f82620015f2565b9050919050565b620016318162001612565b82525050565b60006020820190506200164e600083018462001626565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6000620016ab620016a56200169f84620015f2565b62001680565b620015f2565b9050919050565b6000620016bf826200168a565b9050919050565b6000620016d382620016b2565b9050919050565b620016e581620016c6565b82525050565b6000620016f98383620016da565b60208301905092915050565b6000602082019050919050565b60006200171f8262001654565b6200172b81856200165f565b9350620017388362001670565b8060005b838110156200176f578151620017538882620016eb565b9750620017608362001705565b9250506001810190506200173c565b5085935050505092915050565b6000602082019050818103600083015262001798818462001712565b905092915050565b620017ab8162001612565b8114620017b757600080fd5b50565b600081359050620017cb81620017a0565b92915050565b600060208284031215620017ea57620017e962000e55565b5b6000620017fa84828501620017ba565b91505092915050565b6200180e81620016c6565b82525050565b60006020820190506200182b600083018462001803565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200189c8262000e13565b9150620018a98362000e13565b925082620018bc57620018bb62001831565b5b828204905092915050565b6000604082019050620018de600083018562001626565b620018ed602083018462000e1d565b9392505050565b6000620019018262000e13565b91506200190e8362000e13565b92508282026200191e8162000e13565b9150828204841483151762001938576200193762001860565b5b5092915050565b600082825260208201905092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e206d696e5260008201527f657475726e416d6f756e74000000000000000000000000000000000000000000602082015250565b6000620019ae602b836200193f565b9150620019bb8262001950565b604082019050919050565b60006020820190508181036000830152620019e1816200199f565b9050919050565b600081519050620019f98162000e5f565b92915050565b60006020828403121562001a185762001a1762000e55565b5b600062001a2884828501620019e8565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600062001a696014836200193f565b915062001a768262001a31565b602082019050919050565b6000602082019050818103600083015262001a9c8162001a5a565b9050919050565b600062001ab08262000e13565b915062001abd8362000e13565b925082820390508181111562001ad85762001ad762001860565b5b92915050565b600060608201905062001af5600083018662001626565b62001b04602083018562001626565b62001b13604083018462000e1d565b949350505050565b60008115159050919050565b62001b328162001b1b565b811462001b3e57600080fd5b50565b60008151905062001b528162001b27565b92915050565b60006020828403121562001b715762001b7062000e55565b5b600062001b818482850162001b41565b91505092915050565b7f46656573206e6f74207061696400000000000000000000000000000000000000600082015250565b600062001bc2600d836200193f565b915062001bcf8262001b8a565b602082019050919050565b6000602082019050818103600083015262001bf58162001bb3565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001c3857808201518184015260208101905062001c1b565b60008484015250505050565b600062001c518262001bfc565b62001c5d818562001c07565b935062001c6f81856020860162001c18565b62001c7a8162000ec7565b840191505092915050565b600060c083016000830151848203600086015262001ca4828262001c44565b9150506020830151848203602086015262001cc0828262001c44565b9150506040830151848203604086015262001cdc828262001c44565b9150506060830151848203606086015262001cf8828262001c44565b9150506080830151848203608086015262001d14828262001c44565b91505060a083015184820360a086015262001d30828262001c44565b9150508091505092915050565b62001d488162000e13565b82525050565b600061016083016000830151848203600086015262001d6e828262001c44565b9150506020830151848203602086015262001d8a828262001c44565b9150506040830151848203604086015262001da6828262001c44565b9150506060830151848203606086015262001dc2828262001c44565b915050608083015162001dd9608086018262001d3d565b5060a083015162001dee60a086018262001d3d565b5060c083015162001e0360c086018262001d3d565b5060e083015162001e1860e086018262001d3d565b5061010083015162001e2f61010086018262001d3d565b5061012083015162001e4661012086018262001d3d565b5061014083015162001e5d61014086018262001d3d565b508091505092915050565b6000606083016000830151848203600086015262001e87828262001c44565b9150506020830151848203602086015262001ea3828262001c44565b9150506040830151848203604086015262001ebf828262001c44565b9150508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600062001f06838362001c44565b905092915050565b6000602082019050919050565b600062001f288262001ecc565b62001f34818562001ed7565b93508360208202850162001f488562001ee8565b8060005b8581101562001f8a578484038952815162001f68858262001ef8565b945062001f758362001f0e565b925060208a0199505060018101905062001f4c565b50829750879550505050505092915050565b6000608082019050818103600083015262001fb8818762001c85565b9050818103602083015262001fce818662001d4e565b9050818103604083015262001fe4818562001e68565b9050818103606083015262001ffa818462001f1b565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620020636026836200193f565b9150620020708262002005565b604082019050919050565b60006020820190508181036000830152620020968162002054565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620020d56020836200193f565b9150620020e2826200209d565b602082019050919050565b600060208201905081810360008301526200210881620020c6565b905091905056fe60806040523480156200001157600080fd5b5060405162002de738038062002de7833981810160405281019062000037919062000a74565b620000576200004b6200020d60201b60201c565b6200021560201b60201c565b836001600082015181600001908162000071919062000da3565b50602082015181600101908162000089919062000da3565b506040820151816002019081620000a1919062000da3565b506060820151816003019081620000b9919062000da3565b506080820151816004019081620000d1919062000da3565b5060a0820151816005019081620000e9919062000da3565b50905050826007600082015181600001908162000107919062000da3565b5060208201518160010190816200011f919062000da3565b50604082015181600201908162000137919062000da3565b5060608201518160030190816200014f919062000da3565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a01559050508160126000820151816000019081620001b6919062000da3565b506020820151816001019081620001ce919062000da3565b506040820151816002019081620001e6919062000da3565b50905050806015908051906020019062000202929190620002d9565b505050505062000e8a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000326579160200282015b828111156200032557825182908162000314919062000da3565b5091602001919060010190620002fa565b5b50905062000335919062000339565b5090565b5b808211156200035d576000818162000353919062000361565b506001016200033a565b5090565b5080546200036f9062000b9c565b6000825580601f10620003835750620003a4565b601f016020900490600052602060002090810190620003a39190620003a7565b5b50565b5b80821115620003c2576000816000905550600101620003a8565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200042a82620003df565b810181811067ffffffffffffffff821117156200044c576200044b620003f0565b5b80604052505050565b600062000461620003c6565b90506200046f82826200041f565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115620004a157620004a0620003f0565b5b620004ac82620003df565b9050602081019050919050565b60005b83811015620004d9578082015181840152602081019050620004bc565b60008484015250505050565b6000620004fc620004f68462000483565b62000455565b9050828152602081018484840111156200051b576200051a6200047e565b5b62000528848285620004b9565b509392505050565b600082601f83011262000548576200054762000479565b5b81516200055a848260208601620004e5565b91505092915050565b600060c082840312156200057c576200057b620003da565b5b6200058860c062000455565b9050600082015167ffffffffffffffff811115620005ab57620005aa62000474565b5b620005b98482850162000530565b600083015250602082015167ffffffffffffffff811115620005e057620005df62000474565b5b620005ee8482850162000530565b602083015250604082015167ffffffffffffffff81111562000615576200061462000474565b5b620006238482850162000530565b604083015250606082015167ffffffffffffffff8111156200064a576200064962000474565b5b620006588482850162000530565b606083015250608082015167ffffffffffffffff8111156200067f576200067e62000474565b5b6200068d8482850162000530565b60808301525060a082015167ffffffffffffffff811115620006b457620006b362000474565b5b620006c28482850162000530565b60a08301525092915050565b6000819050919050565b620006e381620006ce565b8114620006ef57600080fd5b50565b6000815190506200070381620006d8565b92915050565b60006101608284031215620007235762000722620003da565b5b6200073061016062000455565b9050600082015167ffffffffffffffff81111562000753576200075262000474565b5b620007618482850162000530565b600083015250602082015167ffffffffffffffff81111562000788576200078762000474565b5b620007968482850162000530565b602083015250604082015167ffffffffffffffff811115620007bd57620007bc62000474565b5b620007cb8482850162000530565b604083015250606082015167ffffffffffffffff811115620007f257620007f162000474565b5b620008008482850162000530565b60608301525060806200081684828501620006f2565b60808301525060a06200082c84828501620006f2565b60a08301525060c06200084284828501620006f2565b60c08301525060e06200085884828501620006f2565b60e0830152506101006200086f84828501620006f2565b610100830152506101206200088784828501620006f2565b610120830152506101406200089f84828501620006f2565b6101408301525092915050565b600060608284031215620008c557620008c4620003da565b5b620008d1606062000455565b9050600082015167ffffffffffffffff811115620008f457620008f362000474565b5b620009028482850162000530565b600083015250602082015167ffffffffffffffff81111562000929576200092862000474565b5b620009378482850162000530565b602083015250604082015167ffffffffffffffff8111156200095e576200095d62000474565b5b6200096c8482850162000530565b60408301525092915050565b600067ffffffffffffffff821115620009965762000995620003f0565b5b602082029050602081019050919050565b600080fd5b6000620009c3620009bd8462000978565b62000455565b90508083825260208201905060208402830185811115620009e957620009e8620009a7565b5b835b8181101562000a3757805167ffffffffffffffff81111562000a125762000a1162000479565b5b80860162000a21898262000530565b85526020850194505050602081019050620009eb565b5050509392505050565b600082601f83011262000a595762000a5862000479565b5b815162000a6b848260208601620009ac565b91505092915050565b6000806000806080858703121562000a915762000a90620003d0565b5b600085015167ffffffffffffffff81111562000ab25762000ab1620003d5565b5b62000ac08782880162000563565b945050602085015167ffffffffffffffff81111562000ae45762000ae3620003d5565b5b62000af28782880162000709565b935050604085015167ffffffffffffffff81111562000b165762000b15620003d5565b5b62000b2487828801620008ac565b925050606085015167ffffffffffffffff81111562000b485762000b47620003d5565b5b62000b568782880162000a41565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000bb557607f821691505b60208210810362000bcb5762000bca62000b6d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000c357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000bf6565b62000c41868362000bf6565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000c8462000c7e62000c7884620006ce565b62000c59565b620006ce565b9050919050565b6000819050919050565b62000ca08362000c63565b62000cb862000caf8262000c8b565b84845462000c03565b825550505050565b600090565b62000ccf62000cc0565b62000cdc81848462000c95565b505050565b5b8181101562000d045762000cf860008262000cc5565b60018101905062000ce2565b5050565b601f82111562000d535762000d1d8162000bd1565b62000d288462000be6565b8101602085101562000d38578190505b62000d5062000d478562000be6565b83018262000ce1565b50505b505050565b600082821c905092915050565b600062000d786000198460080262000d58565b1980831691505092915050565b600062000d93838362000d65565b9150826002028217905092915050565b62000dae8262000b62565b67ffffffffffffffff81111562000dca5762000dc9620003f0565b5b62000dd6825462000b9c565b62000de382828562000d08565b600060209050601f83116001811462000e1b576000841562000e06578287015190505b62000e12858262000d85565b86555062000e82565b601f19841662000e2b8662000bd1565b60005b8281101562000e555784890151825560018201915060208501945060208101905062000e2e565b8683101562000e75578489015162000e71601f89168262000d65565b8355505b6001600288020188555050505b505050505050565b611f4d8062000e9a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101765780639cbad45614610194578063ba16a53c146101b2578063c4f814dc146101ce578063e678560a146101ea578063f2fde38b1461020a576100b4565b806314d57e8b146100b9578063208dabc8146100e157806329838b87146100fd5780634c872b6d1461011957806366440d7114610149578063715018a61461016c575b600080fd5b6100c1610226565b6040516100d89b9a99989796959493929190611066565b60405180910390f35b6100fb60048036038101906100f69190611338565b61048e565b005b61011760048036038101906101129190611467565b6104e1565b005b610133600480360381019061012e91906114dc565b610503565b6040516101409190611509565b60405180910390f35b6101516105af565b6040516101639695949392919061152b565b60405180910390f35b610174610909565b005b61017e61091d565b60405161018b91906115f7565b60405180910390f35b61019c610946565b6040516101a9919061171e565b60405180910390f35b6101cc60048036038101906101c79190611888565b610a1f565b005b6101e860048036038101906101e39190611a4d565b610ab4565b005b6101f2610b66565b60405161020193929190611a96565b60405180910390f35b610224600480360381019061021f9190611b0e565b610d16565b005b600780600001805461023790611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461026390611b6a565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050908060010180546102c590611b6a565b80601f01602080910402602001604051908101604052809291908181526020018280546102f190611b6a565b801561033e5780601f106103135761010080835404028352916020019161033e565b820191906000526020600020905b81548152906001019060200180831161032157829003601f168201915b50505050509080600201805461035390611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461037f90611b6a565b80156103cc5780601f106103a1576101008083540402835291602001916103cc565b820191906000526020600020905b8154815290600101906020018083116103af57829003601f168201915b5050505050908060030180546103e190611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461040d90611b6a565b801561045a5780601f1061042f5761010080835404028352916020019161045a565b820191906000526020600020905b81548152906001019060200180831161043d57829003601f168201915b50505050509080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b610496610d99565b80601260008201518160000190816104ae9190611d47565b5060208201518160010190816104c49190611d47565b5060408201518160020190816104da9190611d47565b5090505050565b6104e9610d99565b80601590805190602001906104ff929190610ee3565b5050565b6015818154811061051357600080fd5b90600052602060002001600091509050805461052e90611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461055a90611b6a565b80156105a75780601f1061057c576101008083540402835291602001916105a7565b820191906000526020600020905b81548152906001019060200180831161058a57829003601f168201915b505050505081565b60018060000180546105c090611b6a565b80601f01602080910402602001604051908101604052809291908181526020018280546105ec90611b6a565b80156106395780601f1061060e57610100808354040283529160200191610639565b820191906000526020600020905b81548152906001019060200180831161061c57829003601f168201915b50505050509080600101805461064e90611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461067a90611b6a565b80156106c75780601f1061069c576101008083540402835291602001916106c7565b820191906000526020600020905b8154815290600101906020018083116106aa57829003601f168201915b5050505050908060020180546106dc90611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461070890611b6a565b80156107555780601f1061072a57610100808354040283529160200191610755565b820191906000526020600020905b81548152906001019060200180831161073857829003601f168201915b50505050509080600301805461076a90611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461079690611b6a565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b5050505050908060040180546107f890611b6a565b80601f016020809104026020016040519081016040528092919081815260200182805461082490611b6a565b80156108715780601f1061084657610100808354040283529160200191610871565b820191906000526020600020905b81548152906001019060200180831161085457829003601f168201915b50505050509080600501805461088690611b6a565b80601f01602080910402602001604051908101604052809291908181526020018280546108b290611b6a565b80156108ff5780601f106108d4576101008083540402835291602001916108ff565b820191906000526020600020905b8154815290600101906020018083116108e257829003601f168201915b5050505050905086565b610911610d99565b61091b6000610e17565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606015805480602002602001604051908101604052809291908181526020016000905b82821015610a1657838290600052602060002001805461098990611b6a565b80601f01602080910402602001604051908101604052809291908181526020018280546109b590611b6a565b8015610a025780601f106109d757610100808354040283529160200191610a02565b820191906000526020600020905b8154815290600101906020018083116109e557829003601f168201915b50505050508152602001906001019061096a565b50505050905090565b610a27610d99565b8060016000820151816000019081610a3f9190611d47565b506020820151816001019081610a559190611d47565b506040820151816002019081610a6b9190611d47565b506060820151816003019081610a819190611d47565b506080820151816004019081610a979190611d47565b5060a0820151816005019081610aad9190611d47565b5090505050565b610abc610d99565b8060076000820151816000019081610ad49190611d47565b506020820151816001019081610aea9190611d47565b506040820151816002019081610b009190611d47565b506060820151816003019081610b169190611d47565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015590505050565b6012806000018054610b7790611b6a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba390611b6a565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505090806001018054610c0590611b6a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3190611b6a565b8015610c7e5780601f10610c5357610100808354040283529160200191610c7e565b820191906000526020600020905b815481529060010190602001808311610c6157829003601f168201915b505050505090806002018054610c9390611b6a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbf90611b6a565b8015610d0c5780601f10610ce157610100808354040283529160200191610d0c565b820191906000526020600020905b815481529060010190602001808311610cef57829003601f168201915b5050505050905083565b610d1e610d99565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8490611e8b565b60405180910390fd5b610d9681610e17565b50565b610da1610edb565b73ffffffffffffffffffffffffffffffffffffffff16610dbf61091d565b73ffffffffffffffffffffffffffffffffffffffff1614610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c90611ef7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054828255906000526020600020908101928215610f2b579160200282015b82811115610f2a578251829081610f1a9190611d47565b5091602001919060010190610f03565b5b509050610f389190610f3c565b5090565b5b80821115610f5c5760008181610f539190610f60565b50600101610f3d565b5090565b508054610f6c90611b6a565b6000825580601f10610f7e5750610f9d565b601f016020900490600052602060002090810190610f9c9190610fa0565b5b50565b5b80821115610fb9576000816000905550600101610fa1565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ff7578082015181840152602081019050610fdc565b60008484015250505050565b6000601f19601f8301169050919050565b600061101f82610fbd565b6110298185610fc8565b9350611039818560208601610fd9565b61104281611003565b840191505092915050565b6000819050919050565b6110608161104d565b82525050565b6000610160820190508181036000830152611081818e611014565b90508181036020830152611095818d611014565b905081810360408301526110a9818c611014565b905081810360608301526110bd818b611014565b90506110cc608083018a611057565b6110d960a0830189611057565b6110e660c0830188611057565b6110f360e0830187611057565b611101610100830186611057565b61110f610120830185611057565b61111d610140830184611057565b9c9b505050505050505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61117e82611003565b810181811067ffffffffffffffff8211171561119d5761119c611146565b5b80604052505050565b60006111b061112d565b90506111bc8282611175565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156111eb576111ea611146565b5b6111f482611003565b9050602081019050919050565b82818337600083830152505050565b600061122361121e846111d0565b6111a6565b90508281526020810184848401111561123f5761123e6111cb565b5b61124a848285611201565b509392505050565b600082601f830112611267576112666111c6565b5b8135611277848260208601611210565b91505092915050565b60006060828403121561129657611295611141565b5b6112a060606111a6565b9050600082013567ffffffffffffffff8111156112c0576112bf6111c1565b5b6112cc84828501611252565b600083015250602082013567ffffffffffffffff8111156112f0576112ef6111c1565b5b6112fc84828501611252565b602083015250604082013567ffffffffffffffff8111156113205761131f6111c1565b5b61132c84828501611252565b60408301525092915050565b60006020828403121561134e5761134d611137565b5b600082013567ffffffffffffffff81111561136c5761136b61113c565b5b61137884828501611280565b91505092915050565b600067ffffffffffffffff82111561139c5761139b611146565b5b602082029050602081019050919050565b600080fd5b60006113c56113c084611381565b6111a6565b905080838252602082019050602084028301858111156113e8576113e76113ad565b5b835b8181101561142f57803567ffffffffffffffff81111561140d5761140c6111c6565b5b80860161141a8982611252565b855260208501945050506020810190506113ea565b5050509392505050565b600082601f83011261144e5761144d6111c6565b5b813561145e8482602086016113b2565b91505092915050565b60006020828403121561147d5761147c611137565b5b600082013567ffffffffffffffff81111561149b5761149a61113c565b5b6114a784828501611439565b91505092915050565b6114b98161104d565b81146114c457600080fd5b50565b6000813590506114d6816114b0565b92915050565b6000602082840312156114f2576114f1611137565b5b6000611500848285016114c7565b91505092915050565b600060208201905081810360008301526115238184611014565b905092915050565b600060c08201905081810360008301526115458189611014565b905081810360208301526115598188611014565b9050818103604083015261156d8187611014565b905081810360608301526115818186611014565b905081810360808301526115958185611014565b905081810360a08301526115a98184611014565b9050979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115e1826115b6565b9050919050565b6115f1816115d6565b82525050565b600060208201905061160c60008301846115e8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061165a82610fbd565b611664818561163e565b9350611674818560208601610fd9565b61167d81611003565b840191505092915050565b6000611694838361164f565b905092915050565b6000602082019050919050565b60006116b482611612565b6116be818561161d565b9350836020820285016116d08561162e565b8060005b8581101561170c57848403895281516116ed8582611688565b94506116f88361169c565b925060208a019950506001810190506116d4565b50829750879550505050505092915050565b6000602082019050818103600083015261173881846116a9565b905092915050565b600060c0828403121561175657611755611141565b5b61176060c06111a6565b9050600082013567ffffffffffffffff8111156117805761177f6111c1565b5b61178c84828501611252565b600083015250602082013567ffffffffffffffff8111156117b0576117af6111c1565b5b6117bc84828501611252565b602083015250604082013567ffffffffffffffff8111156117e0576117df6111c1565b5b6117ec84828501611252565b604083015250606082013567ffffffffffffffff8111156118105761180f6111c1565b5b61181c84828501611252565b606083015250608082013567ffffffffffffffff8111156118405761183f6111c1565b5b61184c84828501611252565b60808301525060a082013567ffffffffffffffff8111156118705761186f6111c1565b5b61187c84828501611252565b60a08301525092915050565b60006020828403121561189e5761189d611137565b5b600082013567ffffffffffffffff8111156118bc576118bb61113c565b5b6118c884828501611740565b91505092915050565b600061016082840312156118e8576118e7611141565b5b6118f36101606111a6565b9050600082013567ffffffffffffffff811115611913576119126111c1565b5b61191f84828501611252565b600083015250602082013567ffffffffffffffff811115611943576119426111c1565b5b61194f84828501611252565b602083015250604082013567ffffffffffffffff811115611973576119726111c1565b5b61197f84828501611252565b604083015250606082013567ffffffffffffffff8111156119a3576119a26111c1565b5b6119af84828501611252565b60608301525060806119c3848285016114c7565b60808301525060a06119d7848285016114c7565b60a08301525060c06119eb848285016114c7565b60c08301525060e06119ff848285016114c7565b60e083015250610100611a14848285016114c7565b61010083015250610120611a2a848285016114c7565b61012083015250610140611a40848285016114c7565b6101408301525092915050565b600060208284031215611a6357611a62611137565b5b600082013567ffffffffffffffff811115611a8157611a8061113c565b5b611a8d848285016118d1565b91505092915050565b60006060820190508181036000830152611ab08186611014565b90508181036020830152611ac48185611014565b90508181036040830152611ad88184611014565b9050949350505050565b611aeb816115d6565b8114611af657600080fd5b50565b600081359050611b0881611ae2565b92915050565b600060208284031215611b2457611b23611137565b5b6000611b3284828501611af9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b8257607f821691505b602082108103611b9557611b94611b3b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611bfd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611bc0565b611c078683611bc0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611c44611c3f611c3a8461104d565b611c1f565b61104d565b9050919050565b6000819050919050565b611c5e83611c29565b611c72611c6a82611c4b565b848454611bcd565b825550505050565b600090565b611c87611c7a565b611c92818484611c55565b505050565b5b81811015611cb657611cab600082611c7f565b600181019050611c98565b5050565b601f821115611cfb57611ccc81611b9b565b611cd584611bb0565b81016020851015611ce4578190505b611cf8611cf085611bb0565b830182611c97565b50505b505050565b600082821c905092915050565b6000611d1e60001984600802611d00565b1980831691505092915050565b6000611d378383611d0d565b9150826002028217905092915050565b611d5082610fbd565b67ffffffffffffffff811115611d6957611d68611146565b5b611d738254611b6a565b611d7e828285611cba565b600060209050601f831160018114611db15760008415611d9f578287015190505b611da98582611d2b565b865550611e11565b601f198416611dbf86611b9b565b60005b82811015611de757848901518255600182019150602085019450602081019050611dc2565b86831015611e045784890151611e00601f891682611d0d565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e75602683610fc8565b9150611e8082611e19565b604082019050919050565b60006020820190508181036000830152611ea481611e68565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611ee1602083610fc8565b9150611eec82611eab565b602082019050919050565b60006020820190508181036000830152611f1081611ed4565b905091905056fea26469706673582212207c5b8b88e3a2b4c911d45ec1db35218a71ab3942fe1a285c2dbc91ae804478e864736f6c63430008120033a264697066735822122051873afe37116bbe211b82e84de56e40f68e3b40cdb86db0819b6b6dac29272264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2625,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "properties",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(Property)2607)dyn_storage"
      },
      {
        "astId": 2627,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2629,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "exchangeRatio",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2631,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "returnPenalty",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2633,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "minReturnAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Property)2607)dyn_storage": {
        "base": "t_contract(Property)2607",
        "encoding": "dynamic_array",
        "label": "contract Property[]",
        "numberOfBytes": "32"
      },
      "t_contract(Property)2607": {
        "encoding": "inplace",
        "label": "contract Property",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}