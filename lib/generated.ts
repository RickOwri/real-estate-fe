// Generated by @wagmi/cli@1.2.0 on 6/14/2023 at 1:14:57 AM
import {
  UseContractEventConfig,
  UseContractReadConfig,
  UseContractWriteConfig,
  UsePrepareContractWriteConfig,
  useContractEvent,
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
} from "wagmi"
import {
  PrepareWriteContractResult,
  ReadContractResult,
  WriteContractMode,
} from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Property
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const propertyABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_propertyAddress",
        internalType: "struct SharedStruct.PropertyAddress",
        type: "tuple",
        components: [
          { name: "unitNumber", internalType: "string", type: "string" },
          { name: "street", internalType: "string", type: "string" },
          { name: "city", internalType: "string", type: "string" },
          { name: "state", internalType: "string", type: "string" },
          { name: "zip", internalType: "string", type: "string" },
          { name: "country", internalType: "string", type: "string" },
        ],
      },
      {
        name: "_propertyData",
        internalType: "struct SharedStruct.PropertyData",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "description", internalType: "string", type: "string" },
          { name: "propertyStatus", internalType: "string", type: "string" },
          { name: "propertyType", internalType: "string", type: "string" },
          { name: "landSize", internalType: "string", type: "string" },
          { name: "pricePerSqft", internalType: "string", type: "string" },
          { name: "bedrooms", internalType: "string", type: "string" },
          { name: "bathrooms", internalType: "string", type: "string" },
          { name: "yearBuilt", internalType: "string", type: "string" },
          { name: "lastSoldPrice", internalType: "string", type: "string" },
          { name: "lastSoldDate", internalType: "string", type: "string" },
        ],
      },
      {
        name: "_propertyOwnerContact",
        internalType: "struct SharedStruct.PropertyOwnerContact",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "email", internalType: "string", type: "string" },
          { name: "phone", internalType: "string", type: "string" },
        ],
      },
      { name: "_imagesCid", internalType: "string[]", type: "string[]" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getImagesCid",
    outputs: [{ name: "", internalType: "string[]", type: "string[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "imagesCid",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "propertyAddress",
    outputs: [
      { name: "unitNumber", internalType: "string", type: "string" },
      { name: "street", internalType: "string", type: "string" },
      { name: "city", internalType: "string", type: "string" },
      { name: "state", internalType: "string", type: "string" },
      { name: "zip", internalType: "string", type: "string" },
      { name: "country", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "propertyData",
    outputs: [
      { name: "name", internalType: "string", type: "string" },
      { name: "description", internalType: "string", type: "string" },
      { name: "propertyStatus", internalType: "string", type: "string" },
      { name: "propertyType", internalType: "string", type: "string" },
      { name: "landSize", internalType: "string", type: "string" },
      { name: "pricePerSqft", internalType: "string", type: "string" },
      { name: "bedrooms", internalType: "string", type: "string" },
      { name: "bathrooms", internalType: "string", type: "string" },
      { name: "yearBuilt", internalType: "string", type: "string" },
      { name: "lastSoldPrice", internalType: "string", type: "string" },
      { name: "lastSoldDate", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "propertyOwnerContact",
    outputs: [
      { name: "name", internalType: "string", type: "string" },
      { name: "email", internalType: "string", type: "string" },
      { name: "phone", internalType: "string", type: "string" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_imagesCid", internalType: "string[]", type: "string[]" },
    ],
    name: "updateImagesCid",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_propertyAddress",
        internalType: "struct SharedStruct.PropertyAddress",
        type: "tuple",
        components: [
          { name: "unitNumber", internalType: "string", type: "string" },
          { name: "street", internalType: "string", type: "string" },
          { name: "city", internalType: "string", type: "string" },
          { name: "state", internalType: "string", type: "string" },
          { name: "zip", internalType: "string", type: "string" },
          { name: "country", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updatePropertyAddress",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_propertyData",
        internalType: "struct SharedStruct.PropertyData",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "description", internalType: "string", type: "string" },
          { name: "propertyStatus", internalType: "string", type: "string" },
          { name: "propertyType", internalType: "string", type: "string" },
          { name: "landSize", internalType: "string", type: "string" },
          { name: "pricePerSqft", internalType: "string", type: "string" },
          { name: "bedrooms", internalType: "string", type: "string" },
          { name: "bathrooms", internalType: "string", type: "string" },
          { name: "yearBuilt", internalType: "string", type: "string" },
          { name: "lastSoldPrice", internalType: "string", type: "string" },
          { name: "lastSoldDate", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updatePropertyData",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_propertyOwnerContact",
        internalType: "struct SharedStruct.PropertyOwnerContact",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "email", internalType: "string", type: "string" },
          { name: "phone", internalType: "string", type: "string" },
        ],
      },
    ],
    name: "updatePropertyOwnerContact",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PropertyManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const propertyManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_fee", internalType: "uint256", type: "uint256" },
      {
        name: "_testToken",
        internalType: "contract TestToken",
        type: "address",
      },
      { name: "_exchangeRatio", internalType: "uint256", type: "uint256" },
      { name: "_returnPenalty", internalType: "uint256", type: "uint256" },
      { name: "_minReturnAmount", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "property",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "PropertyCreated",
  },
  { stateMutability: "payable", type: "fallback" },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_propertyAddress",
        internalType: "struct SharedStruct.PropertyAddress",
        type: "tuple",
        components: [
          { name: "unitNumber", internalType: "string", type: "string" },
          { name: "street", internalType: "string", type: "string" },
          { name: "city", internalType: "string", type: "string" },
          { name: "state", internalType: "string", type: "string" },
          { name: "zip", internalType: "string", type: "string" },
          { name: "country", internalType: "string", type: "string" },
        ],
      },
      {
        name: "_propertyData",
        internalType: "struct SharedStruct.PropertyData",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "description", internalType: "string", type: "string" },
          { name: "propertyStatus", internalType: "string", type: "string" },
          { name: "propertyType", internalType: "string", type: "string" },
          { name: "landSize", internalType: "string", type: "string" },
          { name: "pricePerSqft", internalType: "string", type: "string" },
          { name: "bedrooms", internalType: "string", type: "string" },
          { name: "bathrooms", internalType: "string", type: "string" },
          { name: "yearBuilt", internalType: "string", type: "string" },
          { name: "lastSoldPrice", internalType: "string", type: "string" },
          { name: "lastSoldDate", internalType: "string", type: "string" },
        ],
      },
      {
        name: "_propertyOwnerContact",
        internalType: "struct SharedStruct.PropertyOwnerContact",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "email", internalType: "string", type: "string" },
          { name: "phone", internalType: "string", type: "string" },
        ],
      },
      { name: "_imagesCid", internalType: "string[]", type: "string[]" },
    ],
    name: "createNewProperty",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "exchangeRatio",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "fee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getProperties",
    outputs: [
      { name: "", internalType: "contract Property[]", type: "address[]" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minReturnAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "properties",
    outputs: [{ name: "", internalType: "contract Property", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [],
    name: "purchaseTokens",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "returnPenalty",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "returnTokens",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_exchangeRatio", internalType: "uint256", type: "uint256" },
    ],
    name: "updateExchangeRatio",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_fee", internalType: "uint256", type: "uint256" }],
    name: "updateFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_minReturnAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "updateMinReturnAmount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_returnPenalty", internalType: "uint256", type: "uint256" },
    ],
    name: "updateReturnPenalty",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testTokenABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BURNER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MINTER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "RoleAdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleGranted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RoleRevoked",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "grantRole",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "renounceRole",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" },
    ],
    name: "revokeRole",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__.
 */
export function usePropertyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"getImagesCid"`.
 */
export function usePropertyGetImagesCid<
  TFunctionName extends "getImagesCid",
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    functionName: "getImagesCid",
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"imagesCid"`.
 */
export function usePropertyImagesCid<
  TFunctionName extends "imagesCid",
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    functionName: "imagesCid",
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"owner"`.
 */
export function usePropertyOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"propertyAddress"`.
 */
export function usePropertyPropertyAddress<
  TFunctionName extends "propertyAddress",
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    functionName: "propertyAddress",
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"propertyData"`.
 */
export function usePropertyPropertyData<
  TFunctionName extends "propertyData",
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    functionName: "propertyData",
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"propertyOwnerContact"`.
 */
export function usePropertyPropertyOwnerContact<
  TFunctionName extends "propertyOwnerContact",
  TSelectData = ReadContractResult<typeof propertyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyABI,
    functionName: "propertyOwnerContact",
    ...config,
  } as UseContractReadConfig<typeof propertyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__.
 */
export function usePropertyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof propertyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof propertyABI, TFunctionName, TMode>({
    abi: propertyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePropertyRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<typeof propertyABI, "renounceOwnership", TMode> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any
) {
  return useContractWrite<typeof propertyABI, "renounceOwnership", TMode>({
    abi: propertyABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePropertyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<typeof propertyABI, "transferOwnership", TMode> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any
) {
  return useContractWrite<typeof propertyABI, "transferOwnership", TMode>({
    abi: propertyABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updateImagesCid"`.
 */
export function usePropertyUpdateImagesCid<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          "updateImagesCid"
        >["request"]["abi"],
        "updateImagesCid",
        TMode
      > & { functionName?: "updateImagesCid" }
    : UseContractWriteConfig<typeof propertyABI, "updateImagesCid", TMode> & {
        abi?: never
        functionName?: "updateImagesCid"
      } = {} as any
) {
  return useContractWrite<typeof propertyABI, "updateImagesCid", TMode>({
    abi: propertyABI,
    functionName: "updateImagesCid",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updatePropertyAddress"`.
 */
export function usePropertyUpdatePropertyAddress<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          "updatePropertyAddress"
        >["request"]["abi"],
        "updatePropertyAddress",
        TMode
      > & { functionName?: "updatePropertyAddress" }
    : UseContractWriteConfig<
        typeof propertyABI,
        "updatePropertyAddress",
        TMode
      > & {
        abi?: never
        functionName?: "updatePropertyAddress"
      } = {} as any
) {
  return useContractWrite<typeof propertyABI, "updatePropertyAddress", TMode>({
    abi: propertyABI,
    functionName: "updatePropertyAddress",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updatePropertyData"`.
 */
export function usePropertyUpdatePropertyData<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          "updatePropertyData"
        >["request"]["abi"],
        "updatePropertyData",
        TMode
      > & { functionName?: "updatePropertyData" }
    : UseContractWriteConfig<
        typeof propertyABI,
        "updatePropertyData",
        TMode
      > & {
        abi?: never
        functionName?: "updatePropertyData"
      } = {} as any
) {
  return useContractWrite<typeof propertyABI, "updatePropertyData", TMode>({
    abi: propertyABI,
    functionName: "updatePropertyData",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updatePropertyOwnerContact"`.
 */
export function usePropertyUpdatePropertyOwnerContact<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyABI,
          "updatePropertyOwnerContact"
        >["request"]["abi"],
        "updatePropertyOwnerContact",
        TMode
      > & { functionName?: "updatePropertyOwnerContact" }
    : UseContractWriteConfig<
        typeof propertyABI,
        "updatePropertyOwnerContact",
        TMode
      > & {
        abi?: never
        functionName?: "updatePropertyOwnerContact"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyABI,
    "updatePropertyOwnerContact",
    TMode
  >({
    abi: propertyABI,
    functionName: "updatePropertyOwnerContact",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__.
 */
export function usePreparePropertyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePropertyRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePropertyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updateImagesCid"`.
 */
export function usePreparePropertyUpdateImagesCid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyABI, "updateImagesCid">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    functionName: "updateImagesCid",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, "updateImagesCid">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updatePropertyAddress"`.
 */
export function usePreparePropertyUpdatePropertyAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyABI, "updatePropertyAddress">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    functionName: "updatePropertyAddress",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, "updatePropertyAddress">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updatePropertyData"`.
 */
export function usePreparePropertyUpdatePropertyData(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyABI, "updatePropertyData">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    functionName: "updatePropertyData",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, "updatePropertyData">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyABI}__ and `functionName` set to `"updatePropertyOwnerContact"`.
 */
export function usePreparePropertyUpdatePropertyOwnerContact(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyABI,
      "updatePropertyOwnerContact"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyABI,
    functionName: "updatePropertyOwnerContact",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyABI, "updatePropertyOwnerContact">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link propertyABI}__.
 */
export function usePropertyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof propertyABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: propertyABI,
    ...config,
  } as UseContractEventConfig<typeof propertyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link propertyABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePropertyOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof propertyABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: propertyABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof propertyABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__.
 */
export function usePropertyManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"exchangeRatio"`.
 */
export function usePropertyManagerExchangeRatio<
  TFunctionName extends "exchangeRatio",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "exchangeRatio",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"fee"`.
 */
export function usePropertyManagerFee<
  TFunctionName extends "fee",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "fee",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"getProperties"`.
 */
export function usePropertyManagerGetProperties<
  TFunctionName extends "getProperties",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "getProperties",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"minReturnAmount"`.
 */
export function usePropertyManagerMinReturnAmount<
  TFunctionName extends "minReturnAmount",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "minReturnAmount",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"owner"`.
 */
export function usePropertyManagerOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"properties"`.
 */
export function usePropertyManagerProperties<
  TFunctionName extends "properties",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "properties",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"returnPenalty"`.
 */
export function usePropertyManagerReturnPenalty<
  TFunctionName extends "returnPenalty",
  TSelectData = ReadContractResult<typeof propertyManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof propertyManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: propertyManagerABI,
    functionName: "returnPenalty",
    ...config,
  } as UseContractReadConfig<typeof propertyManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__.
 */
export function usePropertyManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof propertyManagerABI, TFunctionName, TMode>({
    abi: propertyManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"createNewProperty"`.
 */
export function usePropertyManagerCreateNewProperty<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "createNewProperty"
        >["request"]["abi"],
        "createNewProperty",
        TMode
      > & { functionName?: "createNewProperty" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "createNewProperty",
        TMode
      > & {
        abi?: never
        functionName?: "createNewProperty"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyManagerABI,
    "createNewProperty",
    TMode
  >({
    abi: propertyManagerABI,
    functionName: "createNewProperty",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"purchaseTokens"`.
 */
export function usePropertyManagerPurchaseTokens<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "purchaseTokens"
        >["request"]["abi"],
        "purchaseTokens",
        TMode
      > & { functionName?: "purchaseTokens" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "purchaseTokens",
        TMode
      > & {
        abi?: never
        functionName?: "purchaseTokens"
      } = {} as any
) {
  return useContractWrite<typeof propertyManagerABI, "purchaseTokens", TMode>({
    abi: propertyManagerABI,
    functionName: "purchaseTokens",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePropertyManagerRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyManagerABI,
    "renounceOwnership",
    TMode
  >({
    abi: propertyManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"returnTokens"`.
 */
export function usePropertyManagerReturnTokens<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "returnTokens"
        >["request"]["abi"],
        "returnTokens",
        TMode
      > & { functionName?: "returnTokens" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "returnTokens",
        TMode
      > & {
        abi?: never
        functionName?: "returnTokens"
      } = {} as any
) {
  return useContractWrite<typeof propertyManagerABI, "returnTokens", TMode>({
    abi: propertyManagerABI,
    functionName: "returnTokens",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePropertyManagerTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyManagerABI,
    "transferOwnership",
    TMode
  >({
    abi: propertyManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateExchangeRatio"`.
 */
export function usePropertyManagerUpdateExchangeRatio<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "updateExchangeRatio"
        >["request"]["abi"],
        "updateExchangeRatio",
        TMode
      > & { functionName?: "updateExchangeRatio" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "updateExchangeRatio",
        TMode
      > & {
        abi?: never
        functionName?: "updateExchangeRatio"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyManagerABI,
    "updateExchangeRatio",
    TMode
  >({
    abi: propertyManagerABI,
    functionName: "updateExchangeRatio",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateFee"`.
 */
export function usePropertyManagerUpdateFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "updateFee"
        >["request"]["abi"],
        "updateFee",
        TMode
      > & { functionName?: "updateFee" }
    : UseContractWriteConfig<typeof propertyManagerABI, "updateFee", TMode> & {
        abi?: never
        functionName?: "updateFee"
      } = {} as any
) {
  return useContractWrite<typeof propertyManagerABI, "updateFee", TMode>({
    abi: propertyManagerABI,
    functionName: "updateFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateMinReturnAmount"`.
 */
export function usePropertyManagerUpdateMinReturnAmount<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "updateMinReturnAmount"
        >["request"]["abi"],
        "updateMinReturnAmount",
        TMode
      > & { functionName?: "updateMinReturnAmount" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "updateMinReturnAmount",
        TMode
      > & {
        abi?: never
        functionName?: "updateMinReturnAmount"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyManagerABI,
    "updateMinReturnAmount",
    TMode
  >({
    abi: propertyManagerABI,
    functionName: "updateMinReturnAmount",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateReturnPenalty"`.
 */
export function usePropertyManagerUpdateReturnPenalty<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "updateReturnPenalty"
        >["request"]["abi"],
        "updateReturnPenalty",
        TMode
      > & { functionName?: "updateReturnPenalty" }
    : UseContractWriteConfig<
        typeof propertyManagerABI,
        "updateReturnPenalty",
        TMode
      > & {
        abi?: never
        functionName?: "updateReturnPenalty"
      } = {} as any
) {
  return useContractWrite<
    typeof propertyManagerABI,
    "updateReturnPenalty",
    TMode
  >({
    abi: propertyManagerABI,
    functionName: "updateReturnPenalty",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePropertyManagerWithdraw<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof propertyManagerABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<typeof propertyManagerABI, "withdraw", TMode> & {
        abi?: never
        functionName?: "withdraw"
      } = {} as any
) {
  return useContractWrite<typeof propertyManagerABI, "withdraw", TMode>({
    abi: propertyManagerABI,
    functionName: "withdraw",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__.
 */
export function usePreparePropertyManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyManagerABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"createNewProperty"`.
 */
export function usePreparePropertyManagerCreateNewProperty(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyManagerABI,
      "createNewProperty"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "createNewProperty",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "createNewProperty">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"purchaseTokens"`.
 */
export function usePreparePropertyManagerPurchaseTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyManagerABI, "purchaseTokens">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "purchaseTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "purchaseTokens">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePropertyManagerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyManagerABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"returnTokens"`.
 */
export function usePreparePropertyManagerReturnTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyManagerABI, "returnTokens">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "returnTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "returnTokens">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePropertyManagerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyManagerABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateExchangeRatio"`.
 */
export function usePreparePropertyManagerUpdateExchangeRatio(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyManagerABI,
      "updateExchangeRatio"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "updateExchangeRatio",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "updateExchangeRatio">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateFee"`.
 */
export function usePreparePropertyManagerUpdateFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyManagerABI, "updateFee">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "updateFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "updateFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateMinReturnAmount"`.
 */
export function usePreparePropertyManagerUpdateMinReturnAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyManagerABI,
      "updateMinReturnAmount"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "updateMinReturnAmount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "updateMinReturnAmount">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"updateReturnPenalty"`.
 */
export function usePreparePropertyManagerUpdateReturnPenalty(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof propertyManagerABI,
      "updateReturnPenalty"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "updateReturnPenalty",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "updateReturnPenalty">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link propertyManagerABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePreparePropertyManagerWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof propertyManagerABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: propertyManagerABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof propertyManagerABI, "withdraw">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link propertyManagerABI}__.
 */
export function usePropertyManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof propertyManagerABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: propertyManagerABI,
    ...config,
  } as UseContractEventConfig<typeof propertyManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link propertyManagerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePropertyManagerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof propertyManagerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: propertyManagerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof propertyManagerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link propertyManagerABI}__ and `eventName` set to `"PropertyCreated"`.
 */
export function usePropertyManagerPropertyCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof propertyManagerABI, "PropertyCreated">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: propertyManagerABI,
    eventName: "PropertyCreated",
    ...config,
  } as UseContractEventConfig<typeof propertyManagerABI, "PropertyCreated">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__.
 */
export function useTestTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"BURNER_ROLE"`.
 */
export function useTestTokenBurnerRole<
  TFunctionName extends "BURNER_ROLE",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "BURNER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useTestTokenDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useTestTokenMinterRole<
  TFunctionName extends "MINTER_ROLE",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "MINTER_ROLE",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useTestTokenAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTestTokenBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useTestTokenDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useTestTokenGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"hasRole"`.
 */
export function useTestTokenHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"name"`.
 */
export function useTestTokenName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTestTokenSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useTestTokenSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTestTokenTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof testTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: testTokenABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof testTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__.
 */
export function useTestTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof testTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, TFunctionName, TMode>({
    abi: testTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useTestTokenApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof testTokenABI, "approve", TMode> & {
        abi?: never
        functionName?: "approve"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "approve", TMode>({
    abi: testTokenABI,
    functionName: "approve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useTestTokenBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "burn"
        >["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<typeof testTokenABI, "burn", TMode> & {
        abi?: never
        functionName?: "burn"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "burn", TMode>({
    abi: testTokenABI,
    functionName: "burn",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useTestTokenBurnFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "burnFrom"
        >["request"]["abi"],
        "burnFrom",
        TMode
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<typeof testTokenABI, "burnFrom", TMode> & {
        abi?: never
        functionName?: "burnFrom"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "burnFrom", TMode>({
    abi: testTokenABI,
    functionName: "burnFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useTestTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof testTokenABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never
        functionName?: "decreaseAllowance"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "decreaseAllowance", TMode>({
    abi: testTokenABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"grantRole"`.
 */
export function useTestTokenGrantRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof testTokenABI, "grantRole", TMode> & {
        abi?: never
        functionName?: "grantRole"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "grantRole", TMode>({
    abi: testTokenABI,
    functionName: "grantRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useTestTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof testTokenABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never
        functionName?: "increaseAllowance"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "increaseAllowance", TMode>({
    abi: testTokenABI,
    functionName: "increaseAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useTestTokenMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "mint"
        >["request"]["abi"],
        "mint",
        TMode
      > & { functionName?: "mint" }
    : UseContractWriteConfig<typeof testTokenABI, "mint", TMode> & {
        abi?: never
        functionName?: "mint"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "mint", TMode>({
    abi: testTokenABI,
    functionName: "mint",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useTestTokenRenounceRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<typeof testTokenABI, "renounceRole", TMode> & {
        abi?: never
        functionName?: "renounceRole"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "renounceRole", TMode>({
    abi: testTokenABI,
    functionName: "renounceRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useTestTokenRevokeRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof testTokenABI, "revokeRole", TMode> & {
        abi?: never
        functionName?: "revokeRole"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "revokeRole", TMode>({
    abi: testTokenABI,
    functionName: "revokeRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useTestTokenTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof testTokenABI, "transfer", TMode> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "transfer", TMode>({
    abi: testTokenABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTestTokenTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof testTokenABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof testTokenABI, "transferFrom", TMode> & {
        abi?: never
        functionName?: "transferFrom"
      } = {} as any
) {
  return useContractWrite<typeof testTokenABI, "transferFrom", TMode>({
    abi: testTokenABI,
    functionName: "transferFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__.
 */
export function usePrepareTestTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTestTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "approve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareTestTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "burn">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "burn">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareTestTokenBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "burnFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "burnFrom">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareTestTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "decreaseAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareTestTokenGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "grantRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareTestTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "increaseAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTestTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "mint">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "mint">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareTestTokenRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "renounceRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareTestTokenRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "revokeRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTestTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTestTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testTokenABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: testTokenABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof testTokenABI, "transferFrom">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__.
 */
export function useTestTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: testTokenABI,
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useTestTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, "Approval">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useTestTokenRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, "RoleAdminChanged">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useTestTokenRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, "RoleGranted">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useTestTokenRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, "RoleRevoked">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTestTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof testTokenABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: testTokenABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof testTokenABI, "Transfer">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TFunctionName extends "DEFAULT_ADMIN_ROLE",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "DEFAULT_ADMIN_ROLE",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accessControlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof accessControlABI, TFunctionName, TMode>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof accessControlABI, "grantRole", TMode> & {
        abi?: never
        functionName?: "grantRole"
      } = {} as any
) {
  return useContractWrite<typeof accessControlABI, "grantRole", TMode>({
    abi: accessControlABI,
    functionName: "grantRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<typeof accessControlABI, "renounceRole", TMode> & {
        abi?: never
        functionName?: "renounceRole"
      } = {} as any
) {
  return useContractWrite<typeof accessControlABI, "renounceRole", TMode>({
    abi: accessControlABI,
    functionName: "renounceRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof accessControlABI, "revokeRole", TMode> & {
        abi?: never
        functionName?: "revokeRole"
      } = {} as any
) {
  return useContractWrite<typeof accessControlABI, "revokeRole", TMode>({
    abi: accessControlABI,
    functionName: "revokeRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "grantRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "renounceRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, "revokeRole">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleAdminChanged">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleGranted">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, "RoleRevoked">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TFunctionName extends "getRoleAdmin",
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: "getRoleAdmin",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TFunctionName extends "hasRole",
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: "hasRole",
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccessControlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlABI, TFunctionName, TMode>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "grantRole"
        >["request"]["abi"],
        "grantRole",
        TMode
      > & { functionName?: "grantRole" }
    : UseContractWriteConfig<typeof iAccessControlABI, "grantRole", TMode> & {
        abi?: never
        functionName?: "grantRole"
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlABI, "grantRole", TMode>({
    abi: iAccessControlABI,
    functionName: "grantRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "renounceRole"
        >["request"]["abi"],
        "renounceRole",
        TMode
      > & { functionName?: "renounceRole" }
    : UseContractWriteConfig<
        typeof iAccessControlABI,
        "renounceRole",
        TMode
      > & {
        abi?: never
        functionName?: "renounceRole"
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlABI, "renounceRole", TMode>({
    abi: iAccessControlABI,
    functionName: "renounceRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          "revokeRole"
        >["request"]["abi"],
        "revokeRole",
        TMode
      > & { functionName?: "revokeRole" }
    : UseContractWriteConfig<typeof iAccessControlABI, "revokeRole", TMode> & {
        abi?: never
        functionName?: "revokeRole"
      } = {} as any
) {
  return useContractWrite<typeof iAccessControlABI, "revokeRole", TMode>({
    abi: iAccessControlABI,
    functionName: "revokeRole",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "grantRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "grantRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "grantRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "renounceRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "renounceRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "renounceRole">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, "revokeRole">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: "revokeRole",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, "revokeRole">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleAdminChanged">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleAdminChanged",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleAdminChanged">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleGranted">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleGranted",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleGranted">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, "RoleRevoked">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: "RoleRevoked",
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, "RoleRevoked">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ownableABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<typeof ownableABI, "renounceOwnership", TMode> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, "renounceOwnership", TMode>({
    abi: ownableABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<typeof ownableABI, "transferOwnership", TMode> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, "transferOwnership", TMode>({
    abi: ownableABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof ownableABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20ABI, "approve", TMode> & {
        abi?: never
        functionName?: "approve"
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "approve", TMode>({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "decreaseAllowance", TMode> & {
        abi?: never
        functionName?: "decreaseAllowance"
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "decreaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "increaseAllowance", TMode> & {
        abi?: never
        functionName?: "increaseAllowance"
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "increaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20ABI, "transfer", TMode> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "transfer", TMode>({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20ABI, "transferFrom", TMode> & {
        abi?: never
        functionName?: "transferFrom"
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "transferFrom", TMode>({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20ABI, "approve", TMode> & {
        abi?: never
        functionName?: "approve"
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, "approve", TMode>({
    abi: ierc20ABI,
    functionName: "approve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20ABI, "transfer", TMode> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, "transfer", TMode>({
    abi: ierc20ABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof ierc20ABI, "transferFrom", TMode> & {
        abi?: never
        functionName?: "transferFrom"
      } = {} as any
) {
  return useContractWrite<typeof ierc20ABI, "transferFrom", TMode>({
    abi: ierc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "approve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "transferFrom">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, "Approval">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, "Transfer">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20BurnableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, TFunctionName, TMode>({
    abi: erc20BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "approve", TMode> & {
        abi?: never
        functionName?: "approve"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "approve", TMode>({
    abi: erc20BurnableABI,
    functionName: "approve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "burn"
        >["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "burn", TMode> & {
        abi?: never
        functionName?: "burn"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "burn", TMode>({
    abi: erc20BurnableABI,
    functionName: "burn",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "burnFrom"
        >["request"]["abi"],
        "burnFrom",
        TMode
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "burnFrom", TMode> & {
        abi?: never
        functionName?: "burnFrom"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "burnFrom", TMode>({
    abi: erc20BurnableABI,
    functionName: "burnFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof erc20BurnableABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never
        functionName?: "decreaseAllowance"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "decreaseAllowance", TMode>({
    abi: erc20BurnableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof erc20BurnableABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never
        functionName?: "increaseAllowance"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "increaseAllowance", TMode>({
    abi: erc20BurnableABI,
    functionName: "increaseAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "transfer", TMode> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "transfer", TMode>({
    abi: erc20BurnableABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "transferFrom", TMode> & {
        abi?: never
        functionName?: "transferFrom"
      } = {} as any
) {
  return useContractWrite<typeof erc20BurnableABI, "transferFrom", TMode>({
    abi: erc20BurnableABI,
    functionName: "transferFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "approve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burn">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burn">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burnFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burnFrom">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "decreaseAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "increaseAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transferFrom">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, "Approval">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, "Transfer">)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20MetadataABI, "approve", TMode> & {
        abi?: never
        functionName?: "approve"
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, "approve", TMode>({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20MetadataABI, "transfer", TMode> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, "transfer", TMode>({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        "transferFrom",
        TMode
      > & {
        abi?: never
        functionName?: "transferFrom"
      } = {} as any
) {
  return useContractWrite<typeof ierc20MetadataABI, "transferFrom", TMode>({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Approval">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">)
}
